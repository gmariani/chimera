!function(e){function n(r){if(o[r])return o[r].exports;var s=o[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.l=!0,s.exports}var o={};n.m=e,n.c=o,n.d=function(e,o,r){n.o(e,o)||Object.defineProperty(e,o,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(o,"a",o),o},n.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},n.p="",n(n.s=0)}([function(e,n,o){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=o(1),s=o(2),t={},i=!0;!function(){var e;t.getOS=function(){if(!e){var n=[{s:"Windows 3.11",r:/Win16/,short:"Win"},{s:"Windows 95",r:/(Windows 95|Win95|Windows_95)/,short:"Win"},{s:"Windows ME",r:/(Win 9x 4.90|Windows ME)/,short:"Win"},{s:"Windows 98",r:/(Windows 98|Win98)/,short:"Win"},{s:"Windows CE",r:/Windows CE/,short:"Win"},{s:"Windows 2000",r:/(Windows NT 5.0|Windows 2000)/,short:"Win"},{s:"Windows XP",r:/(Windows NT 5.1|Windows XP)/,short:"Win"},{s:"Windows Server 2003",r:/Windows NT 5.2/,short:"Win"},{s:"Windows Vista",r:/Windows NT 6.0/,short:"Win"},{s:"Windows 7",r:/(Windows 7|Windows NT 6.1)/,short:"Win"},{s:"Windows 8.1",r:/(Windows 8.1|Windows NT 6.3)/,short:"Win"},{s:"Windows 8",r:/(Windows 8|Windows NT 6.2)/,short:"Win"},{s:"Windows NT 4.0",r:/(Windows NT 4.0|WinNT4.0|WinNT|Windows NT)/,short:"Win"},{s:"Windows ME",r:/Windows ME/,short:"Win"},{s:"Linux",r:/(Linux|X11)/,short:"Linux"},{s:"Mac OS X",r:/Mac OS X/,short:"Mac"},{s:"Mac OS",r:/(MacPPC|MacIntel|Mac_PowerPC|Macintosh)/,short:"Mac"},{s:"UNIX",r:/UNIX/,short:"Unix"}];for(var o in n){var r=n[o];if(r.r.test(navigator.userAgent)){e=r;break}}}return e}}(),Object(r.b)(function(){function e(e){if(e.lengthComputable){var n=Math.round(e.loaded/e.total*100);n<100&&(g.style.width=n+"%",g.textContent=n+"%")}}function n(e){var n=e.target.error;switch(n.code){case n.NOT_FOUND_ERR:console.error("File Not Found!");break;case n.NOT_READABLE_ERR:console.error("File is not readable!");break;case n.ABORT_ERR:break;default:console.error("An error occurred reading this file.<code>"+n.message+"<br>("+n.filename+":"+n.lineno+")</code>")}}function o(e,n){alert("done!"),console.log(e,n)}function t(e,n,o,r){var s=new Worker("js/workers/"+e+".js");s.onmessage=function(e){if("debug"!=e.data.type)if("warning"!=e.data.type)if("alert"!=e.data.type){var n=e.data.data;n.fileSize=o.size,n.fileName=o.name,i&&console.log("Data",n);var s=JSON.stringify(n);r(s,o)}else i&&console.warn(e.data.message);else i&&console.warn(e.data.message);else i&&console.info(e.data.message)},s.onerror=function(e){console.error("Worker "+e.message+"  ("+e.filename+":"+e.lineno+")"),r({text:"Error reading file",icon:"error"},o)},s.postMessage({text:n,fileID:0})}var a,c,d,l=!1,u=[],f="";window.JSON||(f+="<li>JSON API - Used to pass data</li>",l=!0),window.FileReader||(f+="<li>FileReader API - Used to read user files</li>",l=!0),window.Worker||(f+="<li>JavaScript Workers - Used to process files</li>",l=!0),f+="</ul><p>Please upgrade your browser in order to use <strong>.chimera</strong>.</p>",l&&u.push("<p>It appears your browser does not support:</p><ul>"+f),u.length>0&&console.error(u.join("<hr/>"));var w=Object(r.a)("#btnFileCancel"),W=Object(r.a)("#fileProgressBar"),g=Object(r.a)("#fileProgressBar div");Object(r.a)("#filesFile").addEventListener("change",function(r){var l=r.target.files;if(l.length){Object(s.a)(w,"show");var u=(d=l[0]).name.toLowerCase().slice(-3);switch(i&&console.log("File: ",d),u){case"jpg":case"jpeg":c="JPG";break;case"swf":c="SWF";break;default:return void console.error("Invalid file type!")}(a=new FileReader).onerror=n,a.onprogress=e,a.onabort=function(){console.info("File read cancelled.")},a.onloadstart=function(){g.style.width="0%",g.textContent="0%",Object(s.a)(W,"loading")},a.onloadend=function(){g.style.width="100%",g.textContent="100%",setTimeout(function(){Object(s.b)(W,"loading"),Object(s.b)(w,"show")},250)},a.onload=function(e){t(c,e.target.result,d,o)},a.readAsArrayBuffer(d)}else console.warn("Please select a file first!")}),w.addEventListener("click",function(){a&&a.abort()})})},function(e,n,o){"use strict";o.d(n,"a",function(){return r}),o.d(n,"b",function(){return s});const r=(e,n=document)=>{const o=n.querySelectorAll(e);return 1===o.length?o[0]:o},s=(e,n=document)=>{"loading"!==n.readyState?e():n.addEventListener("DOMContentLoaded",e)}},function(e,n,o){"use strict";o.d(n,"a",function(){return r}),o.d(n,"b",function(){return s});const r=(e,n)=>(e.classList?e.classList.add(n):e.className+=" "+n,e),s=(e,n)=>(e.classList?e.classList.remove(n):e.className=e.className.replace(new RegExp("(^|\\b)"+n.split(" ").join("|")+"(\\b|$)","gi")," "),e)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,